import { IOptions } from './google-sheet';
interface IRecord {
    _index?: number;
    _id?: string;
    [key: string]: any;
}
declare class GoogleSheetDb {
    private googleSheet;
    private collections;
    constructor(spreadsheetId: string, options?: IOptions);
    initialize(): Promise<void>;
    private createSheet;
    private syncHeader;
    private getCollectionDataBySheet;
    private initCollection;
    insert<T extends IRecord>(collectionName: string, record: T): Promise<void>;
    insertMany<T extends IRecord>(collectionName: string, records: T[]): Promise<number>;
    find<T extends IRecord>(collectionName: string, predicate?: (value: T, index: number, obj: T[]) => boolean): Promise<IRecord[]>;
    findOne<T extends IRecord>(collectionName: string, predicate?: (value: T, index: number, obj: T[]) => boolean): Promise<IRecord>;
    delete<T extends IRecord>(collectionName: string, predicate: (value: T, index: number, obj: T[]) => boolean): Promise<number>;
    update<T extends IRecord>(collectionName: string, record: T): Promise<boolean>;
    refreshRecord<T extends IRecord>(collectionName: string, record: T): Promise<void>;
    refreshCollection(collectionName: string): Promise<void>;
    refreshAll(): Promise<void>;
}
export default GoogleSheetDb;
