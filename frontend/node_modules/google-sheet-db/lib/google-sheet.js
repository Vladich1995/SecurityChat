"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const googleapis_1 = require("googleapis");
const readline = require("readline");
const debug = (message, ...optionalParams) => {
    console.log('GoogleSheetDb:', message, ...optionalParams);
};
const DEFAULT_SCOPES = ['https://www.googleapis.com/auth/spreadsheets'];
const DEFAULT_TOKEN_PATH = 'token.json';
const DEFAULT_CREDENTIAL_PATH = 'credentials.json';
class GoogleSheet {
    constructor(spreadsheetId, options) {
        this.SPREADSHEET_ID = null;
        this.SCOPES = DEFAULT_SCOPES;
        this.TOKEN_PATH = DEFAULT_TOKEN_PATH;
        this.CREDENTIAL_PATH = DEFAULT_CREDENTIAL_PATH;
        this.auth = null;
        this.SPREADSHEET_ID = spreadsheetId;
        if (options) {
            if (options.scopes) {
                this.SCOPES = options.scopes;
            }
            if (options.tokenPath) {
                this.TOKEN_PATH = options.tokenPath;
            }
            if (options.credentialPath) {
                this.CREDENTIAL_PATH = options.credentialPath;
            }
            if (options.auth) {
                this.auth = options.auth;
            }
        }
    }
    getNewToken(oAuth2Client, callback) {
        const authUrl = oAuth2Client.generateAuthUrl({
            access_type: 'offline',
            scope: this.SCOPES,
        });
        debug('Authorize this app by visiting this url:', authUrl);
        const rl = readline.createInterface({
            input: process.stdin,
            output: process.stdout,
        });
        rl.question('Enter the code from that page here: ', (code) => {
            rl.close();
            oAuth2Client.getToken(code, (err, token) => {
                if (err) {
                    return debug('Error while trying to retrieve access token', err);
                }
                oAuth2Client.setCredentials(token);
                fs.writeFile(this.TOKEN_PATH, JSON.stringify(token), (err) => {
                    if (err) {
                        return debug(err);
                    }
                    debug('Token stored to', this.TOKEN_PATH);
                });
                callback(oAuth2Client);
            });
        });
    }
    authorize(credentials, callback) {
        const { client_secret, client_id, redirect_uris } = credentials.installed;
        const oAuth2Client = new googleapis_1.google.auth.OAuth2(client_id, client_secret, redirect_uris[0]);
        fs.readFile(this.TOKEN_PATH, (err, token) => {
            if (err) {
                return this.getNewToken(oAuth2Client, callback);
            }
            oAuth2Client.setCredentials(JSON.parse(token.toString()));
            callback(oAuth2Client);
        });
    }
    authenticate() {
        if (this.auth) {
            return Promise.resolve();
        }
        return new Promise((resolve, reject) => {
            fs.readFile(this.CREDENTIAL_PATH, (err, content) => {
                if (err) {
                    return reject('Error loading client secret file:' + err.message);
                }
                this.authorize(JSON.parse(content.toString()), (result) => {
                    this.auth = result;
                    resolve();
                });
            });
        });
    }
    async getSheets() {
        const sheets = googleapis_1.google.sheets({ version: 'v4', auth: this.auth });
        const result = await sheets.spreadsheets.get({
            spreadsheetId: this.SPREADSHEET_ID,
            includeGridData: false,
        });
        return result.data.sheets.map(x => x.properties);
    }
    async createSheet(title) {
        const sheets = googleapis_1.google.sheets({ version: 'v4', auth: this.auth });
        const result = await sheets.spreadsheets.batchUpdate({
            spreadsheetId: this.SPREADSHEET_ID,
            requestBody: {
                includeSpreadsheetInResponse: true,
                requests: [{
                        addSheet: {
                            properties: {
                                title,
                            },
                        },
                    }],
            },
        });
        return result.data.updatedSpreadsheet.sheets.map(x => x.properties);
    }
    async insertRows(sheetId, startIndex, count) {
        const sheets = googleapis_1.google.sheets({ version: 'v4', auth: this.auth });
        await sheets.spreadsheets.batchUpdate({
            spreadsheetId: this.SPREADSHEET_ID,
            requestBody: {
                requests: [{
                        insertDimension: {
                            range: {
                                sheetId,
                                dimension: 'ROWS',
                                startIndex,
                                endIndex: startIndex + count,
                            },
                            inheritFromBefore: false,
                        },
                    }],
            },
        });
    }
    async removeRows(sheetId, startIndex, count) {
        debug('remove row', startIndex, count);
        const sheets = googleapis_1.google.sheets({ version: 'v4', auth: this.auth });
        await sheets.spreadsheets.batchUpdate({
            spreadsheetId: this.SPREADSHEET_ID,
            requestBody: {
                requests: [{
                        deleteDimension: {
                            range: {
                                sheetId,
                                dimension: 'ROWS',
                                startIndex,
                                endIndex: startIndex + count,
                            },
                        },
                    }],
            },
        });
    }
    async writeData(range, values) {
        const sheets = googleapis_1.google.sheets({ version: 'v4', auth: this.auth });
        await sheets.spreadsheets.values.update({
            spreadsheetId: this.SPREADSHEET_ID,
            range,
            valueInputOption: 'RAW',
            requestBody: {
                values,
            },
        });
    }
    async applyHeaderStyle(sheetId) {
        const sheets = googleapis_1.google.sheets({ version: 'v4', auth: this.auth });
        await sheets.spreadsheets.batchUpdate({
            spreadsheetId: this.SPREADSHEET_ID,
            requestBody: {
                requests: [{
                        repeatCell: {
                            range: {
                                sheetId,
                                startRowIndex: 0,
                                endRowIndex: 1,
                            },
                            cell: {
                                userEnteredFormat: {
                                    textFormat: {
                                        bold: true,
                                    },
                                },
                            },
                            fields: 'userEnteredFormat(backgroundColor,textFormat,horizontalAlignment)',
                        },
                    }],
            },
        });
    }
    async readData(range) {
        const sheets = googleapis_1.google.sheets({ version: 'v4', auth: this.auth });
        const result = await sheets.spreadsheets.values.get({
            spreadsheetId: this.SPREADSHEET_ID,
            range,
        });
        return result.data.values;
    }
}
exports.default = GoogleSheet;
//# sourceMappingURL=google-sheet.js.map